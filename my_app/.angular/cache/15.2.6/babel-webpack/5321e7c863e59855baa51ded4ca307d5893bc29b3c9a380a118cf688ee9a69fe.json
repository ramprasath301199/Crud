{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport * as forms from '@angular/forms';\nimport { Validators } from '@angular/forms';\nlet HomeComponent = class HomeComponent {\n  constructor(service) {\n    this.service = service;\n    this.update = false;\n  }\n  ngOnInit() {\n    this.service.getdetails().subscribe(data => {\n      this.datas = data;\n      console.log(typeof this.datas);\n    });\n    this.profileForm = new forms.FormGroup({\n      name: new forms.FormControl('', [Validators.required]),\n      LastName: new forms.FormControl('', [Validators.required]),\n      Mobile: new forms.FormControl('', [Validators.required]),\n      Address: new forms.FormControl('', [Validators.required])\n    });\n  }\n  getdet(id) {\n    this.getId = id;\n    this.result = this.datas.find(o => o.Id == id);\n    console.log(this.result);\n    //var name = document.getElementById(\"name\");\n    // name.nodeValue = this.result.name;\n    this.profileForm.get(\"name\").setValue(this.result.name);\n    this.profileForm.get(\"LastName\").setValue(this.result.LastName);\n    this.profileForm.get(\"Mobile\").setValue(this.result.Mobile);\n    this.profileForm.get(\"Address\").setValue(this.result.Address);\n    console.log(this.profileForm.value);\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (!form.valid) {\n      alert(\"Form Is Invalid\");\n    } else {\n      this.service.update(form.value, this.getId).subscribe(data => {\n        console.log(data);\n        if (data) {\n          this.closeModal.nativeElement.click();\n          window.location.reload();\n        }\n      });\n    }\n  }\n};\n__decorate([ViewChild('closeModal')], HomeComponent.prototype, \"closeModal\", void 0);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","forms","Validators","HomeComponent","constructor","service","ngOnInit","getdetails","subscribe","data","datas","console","log","profileForm","FormGroup","name","FormControl","required","LastName","Mobile","Address","getdet","id","getId","result","find","o","Id","get","setValue","value","onSubmit","form","valid","alert","update","closeModal","nativeElement","click","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\admin\\my_project\\my_app\\src\\app\\pages\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport * as forms from '@angular/forms';\nimport { NgForm, Validators } from '@angular/forms';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('closeModal') private closeModal: ElementRef;\n  profileForm: forms.FormGroup;\n  datas: any;\n  result: any;\n  getId: any;\n  update:boolean = false;\n  constructor(private service: DataService) {\n  }\n  ngOnInit(): void {\n    this.service.getdetails().subscribe((data) => {\n      this.datas = data;\n      console.log(typeof this.datas);\n    })\n    this.profileForm = new forms.FormGroup({\n      name: new forms.FormControl('', [Validators.required]),\n      LastName: new forms.FormControl('', [Validators.required]),\n      Mobile: new forms.FormControl('', [Validators.required]),\n      Address: new forms.FormControl('', [Validators.required]),\n    });\n  }\n  getdet(id) {\n    this.getId = id;\n    this.result = this.datas.find(o => o.Id == id);\n    console.log(this.result);\n    //var name = document.getElementById(\"name\");\n    // name.nodeValue = this.result.name;\n    this.profileForm.get(\"name\").setValue(this.result.name);\n    this.profileForm.get(\"LastName\").setValue(this.result.LastName);\n    this.profileForm.get(\"Mobile\").setValue(this.result.Mobile);\n    this.profileForm.get(\"Address\").setValue(this.result.Address);\n    console.log(this.profileForm.value);\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (!form.valid) {\n      alert(\"Form Is Invalid\");\n    }else{\n      this.service.update(form.value,this.getId).subscribe((data) => {\n        console.log(data);\n        if(data){\n          this.closeModal.nativeElement.click();\n          window.location.reload();\n        }\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}